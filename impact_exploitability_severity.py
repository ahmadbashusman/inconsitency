import os
import json
from collections import Counter

def extract_metrics(cvss_data):
    metrics = {}
    
    if 'cvssV3_1' in cvss_data:
        cvss = cvss_data['cvssV3_1']
        vector_string = cvss.get('vectorString', '')
        metrics = parse_vector_string(vector_string)
        metrics['baseSeverity'] = cvss.get('baseSeverity', 'N/A')
        
    elif 'cvssV3_0' in cvss_data:
        cvss = cvss_data['cvssV3_0']
        vector_string = cvss.get('vectorString', '')
        metrics = parse_vector_string(vector_string)
        metrics['baseSeverity'] = cvss.get('baseSeverity', 'N/A')

    elif 'cvssV2_0' in cvss_data:
        cvss = cvss_data['cvssV2_0']
        vector_string = cvss.get('vectorString', '')
        metrics = parse_vector_string_v2(vector_string)
    
    return metrics

def parse_vector_string(vector_string):
    metrics = {
        'Confidentiality': 'N/A',
        'Integrity': 'N/A',
        'Availability': 'N/A',
        'Attack Vector': 'N/A',
        'Attack Complexity': 'N/A',
        'baseSeverity': 'N/A'
    }

    vector_parts = vector_string.split('/')
    for part in vector_parts:
        key, value = part.split(':')
        if key == 'C':
            metrics['Confidentiality'] = value
        elif key == 'I':
            metrics['Integrity'] = value
        elif key == 'A':
            metrics['Availability'] = value
        elif key == 'AV':
            metrics['Attack Vector'] = value
        elif key == 'AC':
            metrics['Attack Complexity'] = value
    
    return metrics

def parse_vector_string_v2(vector_string):
    metrics = {
        'Confidentiality': 'N/A',
        'Integrity': 'N/A',
        'Availability': 'N/A',
        'Attack Vector': 'N/A',
        'Attack Complexity': 'N/A',
    }

    vector_parts = vector_string.split('/')
    for part in vector_parts:
        key, value = part.split(':')
        if key == 'C':
            metrics['Confidentiality'] = value
        elif key == 'I':
            metrics['Integrity'] = value
        elif key == 'A':
            metrics['Availability'] = value
        elif key == 'AV':
            metrics['Attack Vector'] = value
        elif key == 'AC':
            metrics['Attack Complexity'] = value
    
    return metrics

def process_json_files(folder_path):
    # Initialize counters for metrics frequency
    frequency_counter = {
        'Confidentiality': Counter(),
        'Integrity': Counter(),
        'Availability': Counter(),
        'Attack Vector': Counter(),
        'Attack Complexity': Counter(),
        'baseSeverity': Counter()
    }
    
    total_files = 0
    files_missing_metrics = 0
    
    # Iterate over all JSON files in the dataset folder
    for filename in os.listdir(folder_path):
        if filename.endswith('.json'):
            total_files += 1  # Count the total number of files
            file_path = os.path.join(folder_path, filename)
            with open(file_path, 'r') as f:
                data = json.load(f)
                metrics_list = data.get('containers', {}).get('cna', {}).get('metrics', [])
                
                if not metrics_list:
                    files_missing_metrics += 1  # Count files missing the metrics field
                else:
                    for cvss_data in metrics_list:
                        metrics = extract_metrics(cvss_data)
                        if metrics:
                            # Update the frequency counters
                            for key, value in metrics.items():
                                frequency_counter[key][value] += 1
    
    return frequency_counter, total_files, files_missing_metrics

def print_frequencies(frequency_counter):
    for metric, counts in frequency_counter.items():
        print(f"Metric: {metric}")
        for value, count in counts.items():
            print(f"  {value}: {count}")
        print()

# Folder containing the dataset
dataset_folder = './vendor_sw'

# Process the JSON files and get the frequency counts, total files, and files missing metrics
frequency_counts, total_files, files_missing_metrics = process_json_files(dataset_folder)

# Print the results
print_frequencies(frequency_counts)

# Print the number of files iterated over and the number of files missing metrics
print(f"Total JSON files found: {total_files}")
print(f"JSON files missing 'metrics' field: {files_missing_metrics}")
print(f"Total JSON files considered: {total_files-files_missing_metrics}")

